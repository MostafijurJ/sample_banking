// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transfers.sql

package db

import (
	"context"
)

const createTransfer = `-- name: CreateTransfer :one
INSERT INTO TRANSFERS (from_account_id, to_account_id, amount, from_account_number, to_account_number, status)
VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, from_account_id, to_account_id, amount, created_at, status, from_account_number, to_account_number
`

type CreateTransferParams struct {
	FromAccountID     int64  `json:"from_account_id"`
	ToAccountID       int64  `json:"to_account_id"`
	Amount            int64  `json:"amount"`
	FromAccountNumber string `json:"from_account_number"`
	ToAccountNumber   string `json:"to_account_number"`
	Status            string `json:"status"`
}

func (q *Queries) CreateTransfer(ctx context.Context, arg CreateTransferParams) (Transfer, error) {
	row := q.db.QueryRow(ctx, createTransfer,
		arg.FromAccountID,
		arg.ToAccountID,
		arg.Amount,
		arg.FromAccountNumber,
		arg.ToAccountNumber,
		arg.Status,
	)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.Status,
		&i.FromAccountNumber,
		&i.ToAccountNumber,
	)
	return i, err
}

const getTransferById = `-- name: GetTransferById :one
SELECT id, from_account_id, to_account_id, amount, created_at, status, from_account_number, to_account_number FROM TRANSFERS WHERE id = $1
`

func (q *Queries) GetTransferById(ctx context.Context, id int64) (Transfer, error) {
	row := q.db.QueryRow(ctx, getTransferById, id)
	var i Transfer
	err := row.Scan(
		&i.ID,
		&i.FromAccountID,
		&i.ToAccountID,
		&i.Amount,
		&i.CreatedAt,
		&i.Status,
		&i.FromAccountNumber,
		&i.ToAccountNumber,
	)
	return i, err
}
